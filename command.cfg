⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
// 🌟 Command Handler & Client
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
const { Command } = require("@src/structures");
const { client } = require("../../../bot");

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
// 🌟 Discord.js Imports
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
const { 
client, 
MessageEmbed, 
message, 
guild, 
user, 
interaction, 
CommandInteraction, 
MessageActionRow, 
MessageButton, 
ContextMenuInteraction,
WebhookClient,
CommandInteraction,
MessageCollector, 
MessageComponentInteraction, 
MessageFlags,
Util } = require("discord.js");


⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
// 🌟 Misc Bot Utils --> http | utils
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
const { containsLink, containsDiscordInvite, timeformat, getRandomInt, diffHours, getRemainingTime } = require("@utils/miscUtils");
const { sendMessage, safeDM, permissions, parsePermissions } = require("@utils/botUtils");
const { setVoiceChannelName, getMemberStats, resolveMember, getRoleByName } = require("@utils/guildUtils");
const { getBuffer, postToBin, getJson, translate } = require("@utils/httpUtils");
const { closeTicket, openTicket } = require("@utils/ticketUtils");
const { addModAction } = require("@utils/modUtils");
const { redeemKey } = require("@schemas/PremiumKeys");

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
// 🌟 Database Relationals --> Schemas | Mongoose
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
const { mongoose } = require("mongoose");
mongoose.plugin(require("mongoose-lean-defaults").default);
const { getMember } = require("@schemas/Member");
const { addModAction } = require("@utils/modUtils");
const { getSettings } = require("@schemas/Guild");
const { getReactionRoles } = require("@schemas/Message");
const { isTranslated, logTranslation } = require("@schemas/TranslateLog");
const { getWarningLogs, clearWarningLogs } = require("@schemas/ModLog");

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
// 🌟 Country & Translate Relationals
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
const { data } = require("@src/data.json");
const { getCountryLanguages, countryCodeExists } = require("country-language");

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
// 🌟 Managers
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
const { GiveawayManage }  = require("./GiveawayManager");

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
// 🌟 Helpers & Config
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
const { success, warn, error, log, debug, logger } = require("@src/helpers/logger");
const { EMBED_COLORS, IMAGE, CACHE_SIZE } = require("@root/config");
const { BaseContext } = require("./BaseContext");
const API_KEY = process.env.WEATHERSTACK_KEY;

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
// 🌟 Regex Strings
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
const ROLE_MENTION = /<?@?&?(\d{17,20})>?/;
const MEMBER_MENTION = /<?@?!?(\d{17,20})>?/;
const CHANNEL_MENTION = /<?#?(\d{17,20})>?/;

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
// 🌟 Other Packages
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
const { ISO6391 } = require("iso-639-1");
const { sourcebin } = require("sourcebin_js");
const { fetch } = require("node-fetch");
const { gTranslate } = require("@vitalets/google-translate-api");
const { GiveawaysManager } = require("discord-giveaways");
const { FixedSizeMap } = require("fixedsize-map");
const { outdent } = require("outdent");
const { path } = require("path");
const { fs } = require("fs");
const { table } = require("table");
const { timestampToDate } = require("timestamp-to-date");
const { ems } = require("enhanced-ms");
const { getRandomValues } = require("crypto");
chalk = require("chalk")
moment = require("moment"),
nodeLogger = require("simple-node-logger"),




module.exports = class <commandname> extends Command {
    constructor(client) {
        super(client, {
            name: "",
            description: "",
            category: "<ret: CommandCategory>",
            botPermissions: ["<ret: parsePermissions>"],
            command: {
                enabled: false
            },
            slashCommand: {
                enabled: false,
                options: [ // <---- Can be deleted if not applicable
                ]
            },
        });
    }

/**
   * @param {CommandInteraction} interaction
   * @param {promise<newPromise || resolvePromise>.discordjs}
   * @param {client} client
   * @typedef {promiseCMP} promise<.resolvePromise>
*/



// Message Run Function

async messageRun(message) {
// . . .
}

// Interaction Run Function 

async InteractionRun(interaction) {
// . . .
}
}

async InteractionRun(interaction) {
// . . .
}
}